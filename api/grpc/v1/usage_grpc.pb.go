// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/grpc/v1/usage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsageImpact_ListInstances_FullMethodName              = "/api.v1.UsageImpact/ListInstances"
	UsageImpact_ListElasticMetal_FullMethodName           = "/api.v1.UsageImpact/ListElasticMetal"
	UsageImpact_GetElasticMetalUsageImpact_FullMethodName = "/api.v1.UsageImpact/GetElasticMetalUsageImpact"
	UsageImpact_GetInstanceUsageImpact_FullMethodName     = "/api.v1.UsageImpact/GetInstanceUsageImpact"
	UsageImpact_GetStorageUsageImpact_FullMethodName      = "/api.v1.UsageImpact/GetStorageUsageImpact"
)

// UsageImpactClient is the client API for UsageImpact service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsageImpactClient interface {
	ListInstances(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	ListElasticMetal(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListElasticMetalResponse, error)
	GetElasticMetalUsageImpact(ctx context.Context, in *ElasticMetalUsageRequest, opts ...grpc.CallOption) (*CloudUsageImpactResponse, error)
	GetInstanceUsageImpact(ctx context.Context, in *InstanceUsageRequest, opts ...grpc.CallOption) (*CloudUsageImpactResponse, error)
	GetStorageUsageImpact(ctx context.Context, in *StorageUsageRequest, opts ...grpc.CallOption) (*CloudUsageImpactResponse, error)
}

type usageImpactClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageImpactClient(cc grpc.ClientConnInterface) UsageImpactClient {
	return &usageImpactClient{cc}
}

func (c *usageImpactClient) ListInstances(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, UsageImpact_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageImpactClient) ListElasticMetal(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListElasticMetalResponse, error) {
	out := new(ListElasticMetalResponse)
	err := c.cc.Invoke(ctx, UsageImpact_ListElasticMetal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageImpactClient) GetElasticMetalUsageImpact(ctx context.Context, in *ElasticMetalUsageRequest, opts ...grpc.CallOption) (*CloudUsageImpactResponse, error) {
	out := new(CloudUsageImpactResponse)
	err := c.cc.Invoke(ctx, UsageImpact_GetElasticMetalUsageImpact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageImpactClient) GetInstanceUsageImpact(ctx context.Context, in *InstanceUsageRequest, opts ...grpc.CallOption) (*CloudUsageImpactResponse, error) {
	out := new(CloudUsageImpactResponse)
	err := c.cc.Invoke(ctx, UsageImpact_GetInstanceUsageImpact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageImpactClient) GetStorageUsageImpact(ctx context.Context, in *StorageUsageRequest, opts ...grpc.CallOption) (*CloudUsageImpactResponse, error) {
	out := new(CloudUsageImpactResponse)
	err := c.cc.Invoke(ctx, UsageImpact_GetStorageUsageImpact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageImpactServer is the server API for UsageImpact service.
// All implementations must embed UnimplementedUsageImpactServer
// for forward compatibility
type UsageImpactServer interface {
	ListInstances(context.Context, *EmptyRequest) (*ListInstancesResponse, error)
	ListElasticMetal(context.Context, *EmptyRequest) (*ListElasticMetalResponse, error)
	GetElasticMetalUsageImpact(context.Context, *ElasticMetalUsageRequest) (*CloudUsageImpactResponse, error)
	GetInstanceUsageImpact(context.Context, *InstanceUsageRequest) (*CloudUsageImpactResponse, error)
	GetStorageUsageImpact(context.Context, *StorageUsageRequest) (*CloudUsageImpactResponse, error)
	mustEmbedUnimplementedUsageImpactServer()
}

// UnimplementedUsageImpactServer must be embedded to have forward compatible implementations.
type UnimplementedUsageImpactServer struct {
}

func (UnimplementedUsageImpactServer) ListInstances(context.Context, *EmptyRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedUsageImpactServer) ListElasticMetal(context.Context, *EmptyRequest) (*ListElasticMetalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListElasticMetal not implemented")
}
func (UnimplementedUsageImpactServer) GetElasticMetalUsageImpact(context.Context, *ElasticMetalUsageRequest) (*CloudUsageImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElasticMetalUsageImpact not implemented")
}
func (UnimplementedUsageImpactServer) GetInstanceUsageImpact(context.Context, *InstanceUsageRequest) (*CloudUsageImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceUsageImpact not implemented")
}
func (UnimplementedUsageImpactServer) GetStorageUsageImpact(context.Context, *StorageUsageRequest) (*CloudUsageImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageUsageImpact not implemented")
}
func (UnimplementedUsageImpactServer) mustEmbedUnimplementedUsageImpactServer() {}

// UnsafeUsageImpactServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageImpactServer will
// result in compilation errors.
type UnsafeUsageImpactServer interface {
	mustEmbedUnimplementedUsageImpactServer()
}

func RegisterUsageImpactServer(s grpc.ServiceRegistrar, srv UsageImpactServer) {
	s.RegisterService(&UsageImpact_ServiceDesc, srv)
}

func _UsageImpact_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageImpactServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageImpact_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageImpactServer).ListInstances(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageImpact_ListElasticMetal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageImpactServer).ListElasticMetal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageImpact_ListElasticMetal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageImpactServer).ListElasticMetal(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageImpact_GetElasticMetalUsageImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElasticMetalUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageImpactServer).GetElasticMetalUsageImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageImpact_GetElasticMetalUsageImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageImpactServer).GetElasticMetalUsageImpact(ctx, req.(*ElasticMetalUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageImpact_GetInstanceUsageImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageImpactServer).GetInstanceUsageImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageImpact_GetInstanceUsageImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageImpactServer).GetInstanceUsageImpact(ctx, req.(*InstanceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageImpact_GetStorageUsageImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageImpactServer).GetStorageUsageImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageImpact_GetStorageUsageImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageImpactServer).GetStorageUsageImpact(ctx, req.(*StorageUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsageImpact_ServiceDesc is the grpc.ServiceDesc for UsageImpact service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsageImpact_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.UsageImpact",
	HandlerType: (*UsageImpactServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstances",
			Handler:    _UsageImpact_ListInstances_Handler,
		},
		{
			MethodName: "ListElasticMetal",
			Handler:    _UsageImpact_ListElasticMetal_Handler,
		},
		{
			MethodName: "GetElasticMetalUsageImpact",
			Handler:    _UsageImpact_GetElasticMetalUsageImpact_Handler,
		},
		{
			MethodName: "GetInstanceUsageImpact",
			Handler:    _UsageImpact_GetInstanceUsageImpact_Handler,
		},
		{
			MethodName: "GetStorageUsageImpact",
			Handler:    _UsageImpact_GetStorageUsageImpact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/usage.proto",
}
